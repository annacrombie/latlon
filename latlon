#!/bin/sh -eu

export POSIXLY_CORRECT=1
APIKEY_IPIFY="${APIKEY_IPIFY:-}"

usage_() {
  printf '
usage: latlon [OPTIONS]

OPTIONS:
  -p          - display coordinates with a descriptive annotation
  -S          - be quiet
  -l          - list cached coordinates
  -s INDEX    - set current location
  -g          - geocode your current ip (requires ipify api key)
  -r LAT,LON  - add coordinates and lookup descriptive annotation
  -q QUERY    - lookup coords for QUERY
  -f          - flush cache
  -h          - show this'

  exit "$1"
}

die_() {
  printf "%s\n" "$@" >&2
  exit 1
}

run_query() {
  local api="$1"
  local jq="$2"
  local tmp="$dir/tmp"

  command -v curl >/dev/null || die_ "curl not found"
  command -v jq >/dev/null || die_ "jq not found"

  curl -sS "$api" | jq -Mr "$jq" > "$tmp"

  local ll="$(jq -Mr '"\(.lat),\(.lon)"' < "$tmp")"
  local str="$(jq -Mr '"\(.str)"' < "$tmp")"

  [ -z "$ll" ] || [ "$ll" =  *null* ] &&  die_ "no results for query"

  local ret="${cdir}/${ll}"

  printf "%s" "$str" > "$ret"
  rm -f "${dir}/current"*
  printf "%s" "$ret" > "${dir}/current"
}

do_geoip() {
  [ -z "$APIKEY_IPIFY" ] && die_ "please set APIKEY_IPIFY"

  run_query "https://geo.ipify.org/api/v1?apiKey=${APIKEY_IPIFY}" '. | {
      "ip": .ip,
      "lat": .location.lat,
      "lon": .location.lng,
      "str": "\(.location.city), \(.location.region), \(.location.country)",
      "src": .
    }'
}

do_nomatim() {
  local ep="$1"
  local index="$2"
  local args="$3"

  run_query "https://nominatim.openstreetmap.org/${ep}?format=json&${args}" \
    $index' | {
      "ip": null,
      "lat": .lat,
      "lon": .lon,
      "str": "\(.display_name)",
      "src": .
    }'
}

do_nomatim_keyword() {
  local args="$@"
  do_nomatim search '.[0]' "q=${args// /+}"
}

do_nomatim_reverse() {
  do_nomatim reverse '.' "lat=$1&lon=$2"
}

display_cur() {
  local str="" suf="${1:-raw}"

  [ -f "${cur}${suf}" ] && { cat "${cur}${suf}"; return; }

  [ -f "$cur" ] || die_ "no current"
  curf="$(cat "$cur")"
  [ ! -f "$curf" ] && die_ "invalid current"

  case "$suf" in
    pretty) str="$(basename "$curf") - $(cat "$curf")"
      ;;
    raw) str="$(basename "$curf")"
      ;;
  esac

  printf "%s\n" "$str" | tee "${cur}${suf}"
}

list_() {
  local i curf file bn lat lon str iscur

  curf="$(cat "$cur")"
  i=0

  find "$cdir" -type f | while read file; do
    i=$((i+1))
    bn="${file##*/}"
    lat="${bn%%,*}"
    lon="${bn##*,}"
    str="$(cat $file)"
    iscur=" "
    [ "$file" = "$curf" ] && iscur="*"

    printf "%2d %c %10f, %10f - %s\n" "$i" "$iscur" $lat $lon "$str"
  done
}

sel_() {
  local i=0 file tgt=$1
  find "$cdir" -type f | while read file; do
    i=$((i+1))

    [ $i -eq "$tgt" ] && {
      rm -f "$cur"*
      printf "%s" "$file" > "$cur"
      break
    }
  done
}

dir="${XDG_DATA_HOME:-$HOME/.local/share}/latlon"
cdir="${dir}/cache"
cur="${dir}/current"
mode=""
opt=""
display="raw"
arg=""

[ ! -d "$dir" ] && mkdir "$dir"
[ ! -d "$cdir" ] && mkdir -p "$cdir"

if [ "$#" -ge 1 ]; then
  while getopts "hplSs:q:gr:f" opt; do
    case "$opt" in
      h) usage_ 0
        ;;
      p) display=pretty
        ;;
      S) display=quiet
        ;;
      l) mode=list
        ;;
      s) mode=sel
        arg="$OPTARG"
        ;;
      q) mode=query
        arg="$OPTARG"
        ;;
      g) mode=ip
        ;;
      r) mode=rev
        arg="$OPTARG"
        ;;
      f) rm -rvf "$dir"
        exit
        ;;
      ?) usage_ 1;;
    esac
  done

  shift $((OPTIND-1))
fi

[ $# -gt 0 ] && printf "ignoring trailing arguments\n" >&2

case $mode in
  ip) do_geoip
    display_cur pretty
    ;;
  rev) do_nomatim_reverse "${arg%%,*}" "${arg##*,}"
    ;;
  query) do_nomatim_keyword "$arg"
    ;;
  list) list_
    exit
    ;;
  sel) sel_ "$arg"
    ;;
esac

[ "$display" != quiet ] && display_cur "$display"
exit 0
